// Generated by rstantools.  Do not edit by hand.

/*
    rpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_nig_full_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_nig_full");
    reader.add_event(73, 71, "end", "model_nig_full");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
igauss_lpdf(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((-(stan::math::log((2 * stan::math::pi()))) / 2) + (stan::math::log(lambda) / 2)) - ((3 * stan::math::log(x)) / 2)) - ((lambda * square((x - phi))) / ((2 * square(phi)) * x))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
igauss_lpdf(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) {
    return igauss_lpdf<false>(x,phi,lambda, pstream__);
}
struct igauss_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) const {
        return igauss_lpdf(x, phi, lambda, pstream__);
    }
};
template <bool propto, typename T0__>
typename boost::math::tools::promote_args<T0__>::type
jeffreys_lpdf(const T0__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((-(3) * stan::math::log(x)) / 2));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
jeffreys_lpdf(const T0__& x, std::ostream* pstream__) {
    return jeffreys_lpdf<false>(x, pstream__);
}
struct jeffreys_lpdf_functor__ {
    template <bool propto, typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& x, std::ostream* pstream__) const {
        return jeffreys_lpdf(x, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_nig_full : public prob_grad {
private:
        int D;
        std::vector<int> p;
        int sump;
        int n;
        int G;
        int H;
        matrix_d x;
        matrix_d y;
        matrix_d C;
        matrix_d Z;
        double nuf;
        double nud;
        double kappaf;
        double kappad;
        double xif;
        double xid;
public:
    model_nig_full(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_nig_full(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_nig_full_namespace::model_nig_full";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            check_greater_or_equal(function__, "D", D, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("p", "D", D);
            context__.validate_dims("data initialization", "p", "int", context__.to_vec(D));
            p = std::vector<int>(D, int(0));
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            size_t p_k_0_max__ = D;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                p[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "sump", "int", context__.to_vec());
            sump = int(0);
            vals_i__ = context__.vals_i("sump");
            pos__ = 0;
            sump = vals_i__[pos__++];
            check_greater_or_equal(function__, "sump", sump, 1);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 1);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "H", "int", context__.to_vec());
            H = int(0);
            vals_i__ = context__.vals_i("H");
            pos__ = 0;
            H = vals_i__[pos__++];
            check_greater_or_equal(function__, "H", H, 1);
            current_statement_begin__ = 20;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "sump", sump);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,sump));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, sump);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = sump;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("y", "n", n);
            validate_non_negative_index("y", "D", D);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(n,D));
            y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, D);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_2_max__ = D;
            size_t y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                    y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("C", "sump", sump);
            validate_non_negative_index("C", "G", G);
            context__.validate_dims("data initialization", "C", "matrix_d", context__.to_vec(sump,G));
            C = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(sump, G);
            vals_r__ = context__.vals_r("C");
            pos__ = 0;
            size_t C_j_2_max__ = G;
            size_t C_j_1_max__ = sump;
            for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                    C(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("Z", "D", D);
            validate_non_negative_index("Z", "H", H);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec(D,H));
            Z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(D, H);
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_j_2_max__ = H;
            size_t Z_j_1_max__ = D;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    Z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "nuf", "double", context__.to_vec());
            nuf = double(0);
            vals_r__ = context__.vals_r("nuf");
            pos__ = 0;
            nuf = vals_r__[pos__++];
            check_greater_or_equal(function__, "nuf", nuf, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "nud", "double", context__.to_vec());
            nud = double(0);
            vals_r__ = context__.vals_r("nud");
            pos__ = 0;
            nud = vals_r__[pos__++];
            check_greater_or_equal(function__, "nud", nud, 0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "kappaf", "double", context__.to_vec());
            kappaf = double(0);
            vals_r__ = context__.vals_r("kappaf");
            pos__ = 0;
            kappaf = vals_r__[pos__++];
            check_greater_or_equal(function__, "kappaf", kappaf, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "kappad", "double", context__.to_vec());
            kappad = double(0);
            vals_r__ = context__.vals_r("kappad");
            pos__ = 0;
            kappad = vals_r__[pos__++];
            check_greater_or_equal(function__, "kappad", kappad, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "xif", "double", context__.to_vec());
            xif = double(0);
            vals_r__ = context__.vals_r("xif");
            pos__ = 0;
            xif = vals_r__[pos__++];
            check_greater_or_equal(function__, "xif", xif, 0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "xid", "double", context__.to_vec());
            xid = double(0);
            vals_r__ = context__.vals_r("xid");
            pos__ = 0;
            xid = vals_r__[pos__++];
            check_greater_or_equal(function__, "xid", xid, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 33;
            validate_non_negative_index("beta", "sump", sump);
            num_params_r__ += sump;
            current_statement_begin__ = 34;
            validate_non_negative_index("gammasq", "sump", sump);
            num_params_r__ += sump;
            current_statement_begin__ = 35;
            validate_non_negative_index("tausq", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 36;
            validate_non_negative_index("sigmasq", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 37;
            validate_non_negative_index("alphaf", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 38;
            validate_non_negative_index("alphad", "H", H);
            num_params_r__ += H;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_nig_full() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 33;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "sump", sump);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(sump));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(sump);
        size_t beta_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("gammasq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gammasq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gammasq");
        pos__ = 0U;
        validate_non_negative_index("gammasq", "sump", sump);
        context__.validate_dims("parameter initialization", "gammasq", "vector_d", context__.to_vec(sump));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gammasq(sump);
        size_t gammasq_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            gammasq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gammasq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gammasq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("tausq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tausq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tausq");
        pos__ = 0U;
        validate_non_negative_index("tausq", "D", D);
        context__.validate_dims("parameter initialization", "tausq", "vector_d", context__.to_vec(D));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tausq(D);
        size_t tausq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < tausq_j_1_max__; ++j_1__) {
            tausq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tausq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tausq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("sigmasq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmasq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmasq");
        pos__ = 0U;
        validate_non_negative_index("sigmasq", "D", D);
        context__.validate_dims("parameter initialization", "sigmasq", "vector_d", context__.to_vec(D));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmasq(D);
        size_t sigmasq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            sigmasq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigmasq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmasq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("alphaf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alphaf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alphaf");
        pos__ = 0U;
        validate_non_negative_index("alphaf", "G", G);
        context__.validate_dims("parameter initialization", "alphaf", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alphaf(G);
        size_t alphaf_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < alphaf_j_1_max__; ++j_1__) {
            alphaf(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alphaf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alphaf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("alphad")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alphad missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alphad");
        pos__ = 0U;
        validate_non_negative_index("alphad", "H", H);
        context__.validate_dims("parameter initialization", "alphad", "vector_d", context__.to_vec(H));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alphad(H);
        size_t alphad_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < alphad_j_1_max__; ++j_1__) {
            alphad(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alphad);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alphad: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("lambdaf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambdaf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambdaf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambdaf", "double", context__.to_vec());
        double lambdaf(0);
        lambdaf = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambdaf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambdaf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("lambdad")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambdad missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambdad");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambdad", "double", context__.to_vec());
        double lambdad(0);
        lambdad = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambdad);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambdad: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(sump, lp__);
            else
                beta = in__.vector_constrain(sump);
            current_statement_begin__ = 34;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gammasq;
            (void) gammasq;  // dummy to suppress unused var warning
            if (jacobian__)
                gammasq = in__.vector_lb_constrain(0, sump, lp__);
            else
                gammasq = in__.vector_lb_constrain(0, sump);
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tausq;
            (void) tausq;  // dummy to suppress unused var warning
            if (jacobian__)
                tausq = in__.vector_lb_constrain(0, D, lp__);
            else
                tausq = in__.vector_lb_constrain(0, D);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigmasq;
            (void) sigmasq;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasq = in__.vector_lb_constrain(0, D, lp__);
            else
                sigmasq = in__.vector_lb_constrain(0, D);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alphaf;
            (void) alphaf;  // dummy to suppress unused var warning
            if (jacobian__)
                alphaf = in__.vector_constrain(G, lp__);
            else
                alphaf = in__.vector_constrain(G);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alphad;
            (void) alphad;  // dummy to suppress unused var warning
            if (jacobian__)
                alphad = in__.vector_constrain(H, lp__);
            else
                alphad = in__.vector_constrain(H);
            current_statement_begin__ = 39;
            local_scalar_t__ lambdaf;
            (void) lambdaf;  // dummy to suppress unused var warning
            if (jacobian__)
                lambdaf = in__.scalar_lb_constrain(0, lp__);
            else
                lambdaf = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 40;
            local_scalar_t__ lambdad;
            (void) lambdad;  // dummy to suppress unused var warning
            if (jacobian__)
                lambdad = in__.scalar_lb_constrain(0, lp__);
            else
                lambdad = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("gamma", "sump", sump);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma(sump);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,stan::math::sqrt(gammasq));
            current_statement_begin__ = 45;
            validate_non_negative_index("tau", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau(D);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,stan::math::sqrt(tausq));
            current_statement_begin__ = 46;
            validate_non_negative_index("sigma", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma(D);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt(sigmasq));
            current_statement_begin__ = 47;
            validate_non_negative_index("phi", "sump", sump);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(sump);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            stan::math::assign(phi,multiply(C, alphaf));
            current_statement_begin__ = 48;
            validate_non_negative_index("chi", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> chi(D);
            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi, DUMMY_VAR__);
            stan::math::assign(chi,multiply(Z, alphad));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            size_t gamma_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gamma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 45;
            size_t tau_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tau(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tau" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 46;
            size_t sigma_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 47;
            size_t phi_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "phi", phi, 0);
            current_statement_begin__ = 48;
            size_t chi_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < chi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(chi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: chi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable chi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "chi", chi, 0);
            // model body
            {
            current_statement_begin__ = 52;
            int cp(0);
            (void) cp;  // dummy to suppress unused var warning
            stan::math::fill(cp, std::numeric_limits<int>::min());
            current_statement_begin__ = 53;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning
            stan::math::fill(pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 54;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 55;
            for (int d = 1; d <= D; ++d) {
                current_statement_begin__ = 56;
                lp_accum__.add(jeffreys_lpdf(get_base1(sigmasq, d, "sigmasq", 1), pstream__));
                current_statement_begin__ = 57;
                lp_accum__.add(igauss_lpdf(get_base1(tausq, d, "tausq", 1), get_base1(chi, d, "chi", 1), lambdad, pstream__));
                current_statement_begin__ = 59;
                stan::math::assign(cp, get_base1(p, d, "p", 1));
                current_statement_begin__ = 60;
                for (int j = 1; j <= cp; ++j) {
                    current_statement_begin__ = 61;
                    lp_accum__.add(igauss_lpdf(get_base1(gammasq, ((pos + j) - 1), "gammasq", 1), get_base1(phi, ((pos + j) - 1), "phi", 1), lambdaf, pstream__));
                    current_statement_begin__ = 62;
                    lp_accum__.add(normal_log<propto__>(get_base1(beta, ((pos + j) - 1), "beta", 1), 0., ((get_base1(gamma, ((pos + j) - 1), "gamma", 1) * get_base1(tau, d, "tau", 1)) * get_base1(sigma, d, "sigma", 1))));
                }
                current_statement_begin__ = 64;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), "y"), multiply(block(x, 1, pos, n, get_base1(p, d, "p", 1)), segment(beta, pos, get_base1(p, d, "p", 1))), get_base1(sigma, d, "sigma", 1)));
                current_statement_begin__ = 65;
                stan::math::assign(pos, (pos + get_base1(p, d, "p", 1)));
            }
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(alphaf, 0., (nuf / lambdaf)));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(alphad, 0., (nud / lambdad)));
            current_statement_begin__ = 69;
            lp_accum__.add(gamma_log<propto__>(lambdaf, kappaf, lambdaf));
            current_statement_begin__ = 70;
            lp_accum__.add(gamma_log<propto__>(lambdad, kappad, lambdad));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("gammasq");
        names__.push_back("tausq");
        names__.push_back("sigmasq");
        names__.push_back("alphaf");
        names__.push_back("alphad");
        names__.push_back("lambdaf");
        names__.push_back("lambdad");
        names__.push_back("gamma");
        names__.push_back("tau");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("chi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(sump);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sump);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sump);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sump);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_nig_full_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(sump);
        size_t beta_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gammasq = in__.vector_lb_constrain(0, sump);
        size_t gammasq_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            vars__.push_back(gammasq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tausq = in__.vector_lb_constrain(0, D);
        size_t tausq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < tausq_j_1_max__; ++j_1__) {
            vars__.push_back(tausq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmasq = in__.vector_lb_constrain(0, D);
        size_t sigmasq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            vars__.push_back(sigmasq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alphaf = in__.vector_constrain(G);
        size_t alphaf_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < alphaf_j_1_max__; ++j_1__) {
            vars__.push_back(alphaf(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alphad = in__.vector_constrain(H);
        size_t alphad_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < alphad_j_1_max__; ++j_1__) {
            vars__.push_back(alphad(j_1__));
        }
        double lambdaf = in__.scalar_lb_constrain(0);
        vars__.push_back(lambdaf);
        double lambdad = in__.scalar_lb_constrain(0);
        vars__.push_back(lambdad);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("gamma", "sump", sump);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(sump);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,stan::math::sqrt(gammasq));
            current_statement_begin__ = 45;
            validate_non_negative_index("tau", "D", D);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tau(D);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,stan::math::sqrt(tausq));
            current_statement_begin__ = 46;
            validate_non_negative_index("sigma", "D", D);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(D);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt(sigmasq));
            current_statement_begin__ = 47;
            validate_non_negative_index("phi", "sump", sump);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi(sump);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            stan::math::assign(phi,multiply(C, alphaf));
            current_statement_begin__ = 48;
            validate_non_negative_index("chi", "D", D);
            Eigen::Matrix<double, Eigen::Dynamic, 1> chi(D);
            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi, DUMMY_VAR__);
            stan::math::assign(chi,multiply(Z, alphad));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 45;
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 46;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 47;
            check_greater_or_equal(function__, "phi", phi, 0);
            current_statement_begin__ = 48;
            check_greater_or_equal(function__, "chi", chi, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t gamma_j_1_max__ = sump;
                for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                    vars__.push_back(gamma(j_1__));
                }
                size_t tau_j_1_max__ = D;
                for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                    vars__.push_back(tau(j_1__));
                }
                size_t sigma_j_1_max__ = D;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma(j_1__));
                }
                size_t phi_j_1_max__ = sump;
                for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                    vars__.push_back(phi(j_1__));
                }
                size_t chi_j_1_max__ = D;
                for (size_t j_1__ = 0; j_1__ < chi_j_1_max__; ++j_1__) {
                    vars__.push_back(chi(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_nig_full";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gammasq_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tausq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < tausq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tausq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmasq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alphaf_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < alphaf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alphad_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < alphad_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphad" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambdaf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambdad";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t gamma_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t chi_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < chi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gammasq_j_1_max__ = sump;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tausq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < tausq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tausq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmasq_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alphaf_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < alphaf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alphad_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < alphad_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphad" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambdaf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambdad";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t gamma_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_j_1_max__ = sump;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t chi_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < chi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_nig_full_namespace::model_nig_full stan_model;
#endif
