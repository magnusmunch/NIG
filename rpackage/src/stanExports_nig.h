// Generated by rstantools.  Do not edit by hand.

/*
    rpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_nig_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_nig");
    reader.add_event(53, 51, "end", "model_nig");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
igauss_lpdf(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((-(stan::math::log((2 * stan::math::pi()))) / 2) + (stan::math::log(lambda) / 2)) - ((3 * stan::math::log(x)) / 2)) - ((lambda * square((x - phi))) / ((2 * square(phi)) * x))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
igauss_lpdf(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) {
    return igauss_lpdf<false>(x,phi,lambda, pstream__);
}
struct igauss_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                const T1__& phi,
                const T2__& lambda, std::ostream* pstream__) const {
        return igauss_lpdf(x, phi, lambda, pstream__);
    }
};
template <bool propto, typename T0__>
typename boost::math::tools::promote_args<T0__>::type
jeffreys_lpdf(const T0__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((-(3) * stan::math::log(x)) / 2));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
jeffreys_lpdf(const T0__& x, std::ostream* pstream__) {
    return jeffreys_lpdf<false>(x, pstream__);
}
struct jeffreys_lpdf_functor__ {
    template <bool propto, typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& x, std::ostream* pstream__) const {
        return jeffreys_lpdf(x, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_nig : public prob_grad {
private:
        int p;
        int n;
        matrix_d x;
        vector_d y;
        vector_d phi;
        double lambdaf;
        double chi;
        double lambdad;
public:
    model_nig(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_nig(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_nig_namespace::model_nig";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 16;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "p", p);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,p));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = p;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("phi", "p", p);
            context__.validate_dims("data initialization", "phi", "vector_d", context__.to_vec(p));
            phi = Eigen::Matrix<double, Eigen::Dynamic, 1>(p);
            vals_r__ = context__.vals_r("phi");
            pos__ = 0;
            size_t phi_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                phi(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "phi", phi, 0);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "lambdaf", "double", context__.to_vec());
            lambdaf = double(0);
            vals_r__ = context__.vals_r("lambdaf");
            pos__ = 0;
            lambdaf = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambdaf", lambdaf, 0);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "chi", "double", context__.to_vec());
            chi = double(0);
            vals_r__ = context__.vals_r("chi");
            pos__ = 0;
            chi = vals_r__[pos__++];
            check_greater_or_equal(function__, "chi", chi, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "lambdad", "double", context__.to_vec());
            lambdad = double(0);
            vals_r__ = context__.vals_r("lambdad");
            pos__ = 0;
            lambdad = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambdad", lambdad, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 26;
            validate_non_negative_index("gammasq", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_nig() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p", p);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("gammasq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gammasq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gammasq");
        pos__ = 0U;
        validate_non_negative_index("gammasq", "p", p);
        context__.validate_dims("parameter initialization", "gammasq", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gammasq(p);
        size_t gammasq_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            gammasq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gammasq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gammasq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("tausq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tausq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tausq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tausq", "double", context__.to_vec());
        double tausq(0);
        tausq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tausq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tausq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("sigmasq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmasq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmasq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmasq", "double", context__.to_vec());
        double sigmasq(0);
        sigmasq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmasq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmasq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p, lp__);
            else
                beta = in__.vector_constrain(p);
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gammasq;
            (void) gammasq;  // dummy to suppress unused var warning
            if (jacobian__)
                gammasq = in__.vector_lb_constrain(0, p, lp__);
            else
                gammasq = in__.vector_lb_constrain(0, p);
            current_statement_begin__ = 27;
            local_scalar_t__ tausq;
            (void) tausq;  // dummy to suppress unused var warning
            if (jacobian__)
                tausq = in__.scalar_lb_constrain(0, lp__);
            else
                tausq = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 28;
            local_scalar_t__ sigmasq;
            (void) sigmasq;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasq = in__.scalar_lb_constrain(0, lp__);
            else
                sigmasq = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("gamma", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma(p);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,stan::math::sqrt(gammasq));
            current_statement_begin__ = 33;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,stan::math::sqrt(tausq));
            current_statement_begin__ = 34;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt(sigmasq));
            current_statement_begin__ = 35;
            validate_non_negative_index("betasd", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betasd(p);
            stan::math::initialize(betasd, DUMMY_VAR__);
            stan::math::fill(betasd, DUMMY_VAR__);
            stan::math::assign(betasd,multiply(multiply(sigma, gamma), tau));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gamma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 33;
            if (stan::math::is_uninitialized(tau)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 34;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 35;
            size_t betasd_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betasd_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(betasd(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betasd" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betasd: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "betasd", betasd, 0);
            // model body
            current_statement_begin__ = 42;
            lp_accum__.add(jeffreys_lpdf(sigmasq, pstream__));
            current_statement_begin__ = 43;
            lp_accum__.add(igauss_lpdf(tausq, chi, lambdad, pstream__));
            current_statement_begin__ = 44;
            for (int j = 1; j <= p; ++j) {
                current_statement_begin__ = 45;
                lp_accum__.add(igauss_lpdf(get_base1(gammasq, j, "gammasq", 1), get_base1(phi, j, "phi", 1), lambdaf, pstream__));
            }
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(beta, 0., betasd));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(y, multiply(x, beta), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("gammasq");
        names__.push_back("tausq");
        names__.push_back("sigmasq");
        names__.push_back("gamma");
        names__.push_back("tau");
        names__.push_back("sigma");
        names__.push_back("betasd");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_nig_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gammasq = in__.vector_lb_constrain(0, p);
        size_t gammasq_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            vars__.push_back(gammasq(j_1__));
        }
        double tausq = in__.scalar_lb_constrain(0);
        vars__.push_back(tausq);
        double sigmasq = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmasq);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("gamma", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(p);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,stan::math::sqrt(gammasq));
            current_statement_begin__ = 33;
            double tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,stan::math::sqrt(tausq));
            current_statement_begin__ = 34;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt(sigmasq));
            current_statement_begin__ = 35;
            validate_non_negative_index("betasd", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, 1> betasd(p);
            stan::math::initialize(betasd, DUMMY_VAR__);
            stan::math::fill(betasd, DUMMY_VAR__);
            stan::math::assign(betasd,multiply(multiply(sigma, gamma), tau));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 33;
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 34;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 35;
            check_greater_or_equal(function__, "betasd", betasd, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t gamma_j_1_max__ = p;
                for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                    vars__.push_back(gamma(j_1__));
                }
                vars__.push_back(tau);
                vars__.push_back(sigma);
                size_t betasd_j_1_max__ = p;
                for (size_t j_1__ = 0; j_1__ < betasd_j_1_max__; ++j_1__) {
                    vars__.push_back(betasd(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_nig";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gammasq_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tausq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t betasd_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betasd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betasd" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gammasq_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gammasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tausq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t betasd_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betasd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betasd" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_nig_namespace::model_nig stan_model;
#endif
